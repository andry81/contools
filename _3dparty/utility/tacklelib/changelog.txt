2019.01.20:
* fixed: configure_src.bat execution

2019.01.19:
* added: cmake: msys/mingw/cygwin detection support and respective enable/disable variables

2019.01.17:
* changed: minor readme update

2019.01.17:
* new: some example for p7logger header support

2019.01.14:
* minor change

2019.01.09:
* fixed: utility/log: p7logger output empty source file paths in case of run from not origin built drive
* new: utility/log: added PROJECT_ROOT macro to cut of source file absolute paths down to relative ones
* refactor: utility: minor refactor

2019.01.07:
* fixed: utility: not all functions has been return generic path instead of native path
* fixed: utility: log source file path conversion try into relative path where relative path is relative to the module directory
* fixed: testlib: linkage error
* refactor: utility: minor improvements

2019.01.06:
* fixed: utility/log: p7logger empty output

2019.01.06:
* fixed: cmake: missed archive_static from build

2018.12.31:
* changed: minor improvements

2018.12.10:
* new: cmake: targets install rules
* fixed: build under linux
* fixed: deque std::bad_alloc throw around invalid grow size expression

2018.12.09:
* fixed: msvc2015u3 ICE around statics in the vector.hpp

2018.12.08:
* new: cmake: added `add_target_link_directories` function to call to `target_link_directories` function instead of `link_directories` function in the cmake beginning from version 3.13.0
* new: `get_target_link_libraries_recursively` function

2018.12.06:
* new: uniform pi-constant getter function - `math:pi`
* refactor: global includes refactor

2018.12.05:
* new: cmake: root cmake list with dependencies search
* changed: cmake: minor improvement
* changed: minor math.hpp improvement
* changed: moved tackle/geometry/vector.hpp into template classes to detach them from `real` type
* refactor: renamed `includes` directory into `tacklelib` to enable the library user to use unique inclusion paths after the `#include` definitions in the user c++ sources and cmake file lists
* refactor: extracted `configure_src.bat` and `configure_src.sh` scripts from tacklib scripts repository
* refactor: removed `version.hpp` header usage (must be used from a target project instead)
* refactor: `Common.cmake` and other basic modules moved from `tacklelib--cmake` repository to support calls in the root `CMakeLists.txt` file

2018.12.05:
* refactor: tacklelib scripts and template configuration files moved into standalone repository

2018.11.30:
* fixed: build under linux, use C++11 only
* fixed: mutiple fixes for compile and link under linux

2018.11.27:
* new: tackle static_constexpr_value class to get `static constexpr` values transparently under c++11 standard limited compilers (briefly `constexpr` function body in c++11 must consist of a single return statement returning non void value: https://en.cppreference.com/w/cpp/language/constexpr (`exactly one return statement.`))
* refactor: global tackle library refactor to build under linux

2018.11.24:
* fixed: missed date_time template class explicit instantiation

2018.11.23:
* fixed: tackle math macro fixes

2018.11.22:
* changed: p7 client log macros with simple function names w/o function signature as less long in result output

2018.11.21:
* changed: path_basic_string::operator+ replaced by operator/ as more reliable and does not intersect with std::basic_string::operator+. path_basic_string::operator+ is left declared as `= delete` to raise an error on old operator usage.
* missed changes

2018.11.21:
* new: multiline log from p7 logger wrapper
* fixed: sometimes the msvc compiler shows the wrong usage place of a deleted function, old style with a `private` section works better
* fixed: utility filesystem function fixes
* fixed: minor other fixes

2018.11.20:
* fixed: std::make_index_sequence replaced by custom implementation to avoid compilation errors in case of it's absence
* fixed: p7client logger wrapper fix to potentially build under Linux
* fixed: compilation w/o QD library
* fixed: tests: compilation fixes
* fixed: minor fixes
* new: tackle library interface_handle and t_interface_handle classes to wrap private smart_handle classes in public headers
* new: ENABLE_QD_INTEGRATION definition usage
* refactor: moved `tackle/file_handle.hpp` and `tackle/smart_handle.hpp` headers from private headers into public headers
* refactor: compilation w/o QD library
* refactor: ENABLE_* variables usage refactor
* refactor: removed QD_INTEGRATION_ENABLED variable usage

2018.11.19:
* new: tackle type traits `apply` function to translate arrays into variadic function arguments
* changed: p7client wrapper functions upgraded to automatically translate string arguments including template variadic arguments from std::string into std::wstring and back (in p7client the `XCHAR` type is `wchar_t` in Windows, but in Linux `XCHAR` is `char`!).
* refactor: minor refactor

2018.11.19:
* fixed: long path directories/files creation/open
* refactor: tackle utility functions refactor

2018.11.17:
* refactor: more tackle path_string usage in the diagnostic
* refactor: all *_identity class instances usage replaced by tag_* classes usage
* refactor: DEBUG_BREAK_IN_DEBUGGER following with `throw` replaced by DEBUG_BREAK_THROW macro

2018.11.15:
* fixed: Buffer class do_read function out of minimal buffer size read issue
* new: tackle path_string with different directory separator support
* refactor: type identities are extracted from type_traits.hpp for usage with static_assert.hpp

2018.11.13:
* new: 3dparty: pystring library as dependency for tackle utility library functions
* new: 3dparty: readme and changle logs for tackle library dependency projects
* changed: improved tackle library localization functions
* refactor: minor tackle utility functions improvements

2018.11.12:
* changed: tackle library filesystem create/open functions with `throw_on_error` parameter
* refactor: converted all `s_null` static data members into static function members to avoid static initialization order misuse
* other minor changes

2018.11.12:
* refactor: tests: changed testlib to enable usage testlib externally declared test group parameters like ref_in_dir_prefix path from gtest test

2018.11.09:
* fixed: tackle library wide strings usage in wide set of functions
* new: tackle utility wide strings usage in filesystem calls
* new: tackle utility lexical normalization filesystem functions
* new: tackle utility utf16 std::*string to/from utf8 std::string convertion functions
* refactor: template tackle::path_basic_string usage in template functions
* refactor: explicit instantiation of template functions with template tackle::path_basic_string
* missed changes

2018.11.07:
* fixed: missed check both paths on emptiness in the tackle::path_string class
* new: more tackle filesystem functions in utility namespace

2018.11.06:
* fixed: optimized tackle::path_string operators
* fixed: forgot to shrink the string size in the utility::string_format function
* fixed: minor bug fix
* new: tackle library path_string class tests

2018.11.05:
* new: tackle library aligned_storage_always_destruct_from class to enable usage aligned_storage_from with unconditional distruction in destructor
* refactor: tackle library aligned_storage_*/max_aligned_storage_* classes refactor

2018.11.02:
* fixed: missed to enable by default has used components in the setup.hpp.in configuration file
* new: new utility filesystem/time functions
* new: new tackle date_time class for arbitrary storage type and construction from formatted time string
* refactor: utility filesystem functions refactor

2018.11.01:
* refactor: partially switched from standard stringstream time formatting into fmt library time formatting
* refactor: minor multiple refactor

2018.10.30:
* refactor: simplified aligned_storage_by_base and aligned_storage_from_base template classes into single aligned_storage_base template class

2018.10.30:
* changed: improved library api headers

2018.10.26:
* fixed: aligned_storage_by_base template class changed to reduce chances of link collision with exported variant from a shared library in case where derived template class is explicitly specialized for the export
* refactor: completely removed boost usage from testlib library (boost::format replaced by fmt::format)
* refactor: extracted library linkage functionality into standalone headers and LIBRARY_API* macroses, totally reworked to enable an automatic linkage declaration for export/import in headers

2018.10.12:
* new: tests: fmt::format bench tests

2018.10.12:
* refactor: partially replaced boost::format by fmt library usage

2018.10.11:
* new: tackle::string_format function for string formatting avoding boost::format (might be type unsafe but much faster as plain snprintf)
* new: tests: bench tests for tackle::string_format function
* new: generalized form of runtime for each via utility::for_each function
* changed: a bit speedup of utility::Buffer by replacing std::shared_ptr by std::unique_ptr

2018.10.10:
* fixed: utility::arc::libarchive::write_archive function missed stat parameters for an archive
* minor refactor and improvement

2018.10.09:
* fixed: tests: bench tests missed change
* new: tests: bench test for utility::arc::libarchive::write_archive function

2018.10.09:
* fixed: utility::arc::libarchive::write_archive function requirement to create an archive with relative paths inside

2018.10.08:
* new: setup.hpp.in/setup.hpp header template/instance files to enable/disable additional header/source files from tackle/utility directories linked with 3dparty libraries
* new: utility/arc/libarchive header/source functionality to create libarchive file from list of files
* refactor: utility::Buffer moved from utility.hpp header into memory.hpp header

2018.10.05:
* new: 7zip lzma encoder c++ wrapper initial implementation
* changed: replaced usage of boost::shared_ptr in all places by the std::shared_ptr
* changed: tackle::SmartHandle now takes any deleter behaving like a function
* changed: tackle::SmartHandle improved to take inner deleter-with-state value directly in a protected constructor or reset function
* changed: tackle::SmartHandle improved to construct inner state through the std::make_shared to reduce memory allocation calls
* changed: tackle::SmartHandle improved by removing redundant state by shared pointer holder
* changed: tackle::SmartHandle improved by specializing for the void type

2018.10.05:
* changed: build scripts minor changes

2018.10.02:
* new: p7 logger c++ wrapper classes and macroses

2018.10.01:
* minor improvements

2018.09.27:
* fixed: build fix
* fixed: points_distance_epsilon_to_radius_vector_epsilon and radius_vector_epsilon_to_points_distance_epsilon functions
* refactor: refactored vector tolerances/epsilons usage

2018.09.25:
* new: testlib test::log_out_predicate* functions to print log with predicate call
* new: testlib test::log_out_va function with va_list parameter

2018.09.24:
* fixed: DEG_* macros to assert an angle value type of user class, added DEG_*2 macroses to explicitly use `pi` predicate of an user class type
* fixed: consexpr compilation in msvc 2015
* new: some unit tests over QD recent patches
* refactor: mediate refactor

2018.09.20:
* fixed: third type usage in the tackle::variant class
* fixed: internal type case in the tackle::max_aligned_storage class
* new: vector_angle function
* refactor: global std types refactor, replaced all math/float c functions by c++ function from std namespace as more reliable
* refactor: debug break before throw in functions of tackle types
* other minor fixes and refactor

2018.09.18:
* new: utility::inline_stack class to light weight incode stack tracing
* new: UTILITY_IS_TYPE_COMPLETE macro to test on type completeness
* new: gtest extension header (gtest_ext.hpp)
* fixed: tackle::deque capacity relocation/grow fix
* fixed: tackle::variant refactor and fixup
* fixed: tackle::aligned_storage_by refactor and fixup
* refactor: UTILITY_PP_FUNC replaced by UTILITY_PP_FUNCSIG
* other refactor, changes and fixup
* intermediate commit

2018.08.19:
* fixed: assertion private/public headers was not properly merged
* new: FPU precision test inside macro assertion to detect FPU precision corruption in a code
* changed: enabled asserts in release in a sensitive calculation to show up in unit tests

2018.08.18:
* fixed: accidental debug break call inside assertion macro in release which has lead test application to abort
* fixed: invalid non fatal failure level in unit test assertions
* fixed: continuous loop of assertion failures instead of test case quit on first fatal failure
* new: testlib: EXPECT_*_PRED macro extension from gtest
* refactor: moved TEST_LOG_OUT from macro to function

2018.08.16:
* refactor: tackle aligned storage headers to detach different classes from each other and avoid inclusion of invalid headers
* fixed: minor fixup

2018.08.13:
* fixed: minor math::reduce_float_exp_delta fix

2018.08.12:
* new: vector geometry generics and functions

2018.08.10:
* new: math::translate_angle function
* new: unit tests for math::translate_angle function
* refactor: minor refactor over math::normalize_angle_to_range function

2018.08.10:
* new: unit/bench tests "fmod vs math::normalize_angle"
* refactor: math::normalize_angle_to_range function

2018.08.09:
* fixed: linux build

2018.08.08:
* fixed: missed tackle::path_string class operator+ overload
* fixed: minor testlib fix
* new: math::reduce_float_exp_delta, utility::create_directory_if_not_exist, utility::get_file_name, utility::get_file_name_stem functions

2018.08.03:
* new: std::make_unique if not implemented by standard headers
* new: calibrate_tick_step_to_closest_power_of_10 function to calculate axis value label tick step in ui graph plots
* refactor: utility/platform.hpp

2018.07.23:
* fixed: missed tackle::path_string class operator+ overload

2018.07.18:
* refactor: tacklelib math trigonometric functions converted to templated

2018.07.16:
* new: math::angle_distance function
* new: math::angle_distance unit tests

2018.07.15:
* new: math::angle_closest_distance and math::normalize_angle_to_range functions
* new: unit tests
* refactor: build scripts refactor
* minor refactor, fixup and cleanup

2018.07.06:
* fixed: math::normalize_angle test missed

2018.07.05:
* refactor: testlib refactor, moved macro code into functions
* minor fixup and cleanup

2018.07.04:
* fixed: always use radians for internal representation (better precision)
* minor fixup and cleanup

2018.07.03:
* new: tackle::path_string instead of std::string in the filesystem manipulation functions
* refactor: testlib refactor

2018.07.02:
* fixed: linux build fix

2018.06.25:
* fixed: fixed not linkable destruct() function issue
* fixed: full build fix
* fixed: testlib inconsistent linkage under GCC
* cleanup

2018.06.22:
* fixed: workarounded not linkable destruct() function issue

2018.06.20:
* fixed: aligned storage types compilation and cast fixes
* fixed: build scripts init error on unexisted configuration files
* fixed: std::identity replaced because of deprecation in the msvc2017
* new: tackle variant class to get/set multitype container at runtime

2018.06.19:
* refactor: type traits refactor

2018.06.18:
* new: vars and cmake file generator stop with error if files already existed but input and output file versions are different

2018.06.15:
* refactor: moved gtest wrapper functions and symbols into standalone library - testlib

2018.06.10:
* refactor: math.hpp debug performance partial optimization

2018.06.08:
* refactor: replaced ASSERT_*/VERIFY_* macroses in various non test headers/translation files by the DEBUG_ASSERT_*/DEBUG_VERIFY_* macroses to reduce slowdown unit/bench tests in the release configuration
* refactor: other minor refactor

2018.05.07:
* fixed: valgrind illegal instruction error under Linux (__builtin_trap())
* fixed: build script minor fixes
* fixed: unit tests
* refactor: deque unit tests
* refactor: type traits
* refactor: stream storage

2018.05.06:
* fixed: deque implementation/tests bug fix

2018.05.05:
* fixed: deque implementation/tests bug fix
* fixed: minor build fix under Visual Studio 2017 15.7.3
* new: more deque implementation/tests
* changed: cmake toolset switch adoptation for the Visual Studio 2017

2018.05.04:
* fixed: gcc build under linux mint
* fixed: minor bug fix
* new: `tackle/deque.hpp` partial implementation
* new: tests for `tackle/deque.hpp` partial implementation

2018.05.30:
* new: `compressed_type` and `call_traits` based on `boost` library implementation

2018.05.29:
* fixed: missed implementation in the static assert header
* fixed: invalid assert usage in math functions (`BASIC_ASSERT_*` instead of `DEBUG_ASSERT_*`)
* new: `UTILITY_SUPPRESS_OPTIMIZATION_ON_VAR` macros to suppress optimizations around variables or return values in the Release
* new: unit tests under gtest
* changed: `int_log2_floor` function loop unroll (debug builtin optimization)
* changed: permanently enabled POF2 definitions
* changed: `boost::aligned_storage` usage replaced by `std::aligned_storage` to detach public headers from boost headers (C++11)
* refactor: more optimized POF2 definitions for constexpr and runtime cases

2018.05.27:
* fixed: `DEFINE_FORCE_INLINE_TO_FORCE_NO_INLINE` usage

2018.05.22:
* changed: debug.hpp/optimization.hpp definitions check changed from #ifdef/#ifndef into #if/#if! as more safe
* changed: minor improvement
* new: `ERROR_IF_EMPTY_PP_DEF` macro for self filter only not empty defined definitions in `#if` blocks, otherwise through an error

2018.05.21:
* fixed: private definitions interference with public headers
* fixed: aligned_storage_by incorrect declaration header (ODR violation)
* fixed: no case match globbing restore in the `collect_ldd_deps.sh` script
* new: memory functions header

2018.05.07:
* fixed: postinstall fix
* fixed: application main startup helper shell script fix
* fixed: complete build under linux mint
* new: traplib.sh build script
* new: in sources changelog
* other multiple fixes, changes and refactor
