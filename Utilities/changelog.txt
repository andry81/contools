2021.06.24:
* fixed: src/callf: ctrl-c handler disable after child process exit
* fixed: src/callf: always create inbound pipe from child process to console output if outbound pipe to child process from console input is created
* changed: src/callf: minor changes

2021.06.23:
* new: bin/contools: binaries update

2021.06.23:
* new: src/callf: `/reopen-stdin-as-pipe <pipe>`, `/reopen-stdout-as-pipe <pipe>`, `/reopen-stderr-as-pipe <pipe>` options to reopen standard handle as a named pipe
* new: src/callf: `/tee-std[in|out|err]-as-pipe <pipe>`, `/tee-std[in|out|err]-pipe-flush` options to duplicate output to stdin/stdout/stderr into a named pipe
* new: src/callf: `/create-pipe-to-stdout <pipe>`, `/create-pipe-to-stderr <pipe>` options to create a named pipe to read from to write into stdout/stderr. Useful to read stream from self elevated child callf.exe process.
* new: src/callf: `/tee-std[in|out|err]-flush` flag to flush both a tee file and a tee named pipe
* new: src/callf: Use `.` string as `ApplicationNameFormatString` in a command line to avoid child process creation (idle execution). Useful to test a server named pipe connection await or just redirect output from an inbound named pipe to the console window.
* new: src/callf: `/no-std-inherit` flag to prevent standard handles inheritance into child process
* new: src/callf: `/pipe-stdin-to-stdout` flag to explicitly pipe stdin to stdout (applies the `/no-std-inherit` flag)

2021.06.23:
* fixed: src/callf: use `STDIN_FILENO`/`STDOUT_FILENO`/`STDERR_FILENO` instead of `_fileno(stdin)`/`_fileno(stdout)`/`_fileno(stderr)` in call to `_dup2`, otherwise sequenced call to `_close` would close input parameter handle w/o a duplication
* fixed: src/callf: missed stdout flush (and disconnection if a server named pipe end) before close

2021.06.16:
* changed: src/callf: now only the main thread prints info/errors to stdout/stderr, all worker threads only postpone info/errors to the main thread (excluding traffic between stdin and stdout/stderr)

2021.06.11:
* new: src/callf: Now by default if the process console window is not owned and the process is going to close by an error before execute a child process, then the output does duplicate into a parent process console. To disable that behaviour the `/disable-conout-duplicate-to-parent-console-on-error` flag is added.

2021.06.10:
* fixed: src/callf: minor fixup
* new: src/callf: improved stdout/stderr output, use common format string prefix for all stderr output (example: `[<date> <time>] [<pid>] [<module>] error: <message>`)
* refactor: src/callf: code refactor
* refactor: src/chcp: minor refactor
* refactor: src/envvarcmp: minor refactor

2021.06.09:
* fixed: src/callf: The `0xC0000008: An invalid handle was specified.` SEH exception in random `CloseHandle` function call. Missed to duplicate handle before handle ownership transfer in the function `_open_osfhandle` in the function `_set_crt_std_handle`.
* fixed: src/callf: missed case where to apply `/own-console-title` option
* new: src/callf: `/console-title` option
* refactor: src/callf: code refactor

2021.06.02:
* fixed: src/callf: accidental usage of `toupper` instead of `tolower` as should for a file path case insensitive comparison
* refactor: src/callf: extract source code into separate source files

2021.06.01:
* new: bin/contools: binaries update

2021.06.01:
* fixed: src/callf: minor fixup
* changed: src/callf: `/mutex-std-writes`, `/mutex-tee-file-writes` now behaves differently and always mutual exclude writes on a unique absolute case insensitive file path between different processes
* refactor: src/callf: code refactor

2021.05.31:
* fixed: src/callf: missed to check the parent console window handle on equality with the current process console window handle to detect console window inheritance from the parent process
* new: src/callf: `/create-console-title`, `/own-console-title` options to change console title
* changed: src/callf: `/detach-console` flag is replaced by `/create-console` flag because a console detachment creates a standalone instance of console window, `/create-console` flag now has priority over the `/attach-parent-console` flag
* changed: src/callf: `/use-parent-console` flag is removed, `/create-child-console` is used as an opposite replacement
* changed: src/callf: `/create-console` and `/attach-parent-console` flags now always applies at very beginning of the application start, before parse of all other flags and output to the stdout or stderr
* refactor: src/callf: code refactor

2021.05.30:
* fixed: src/callf: missed `tee-std[in|out|err]-dup <fileno>` option check on not opened `<fileno>`
* fixed: src/callf: missed to seek the end of a file after open for write with append on standard handle reopen and a tee file create
* new: src/callf: `/output-flush`, `/inout-flush`, `/tee-std[in|out|err]-file-flush`, `/tee-output-flush`, `/tee-inout-flush` flags for more addressed flush
* changed: src/callf: All std and tee files now opens by default with the append instead of the overwrite option, all `*-append` flags replaced by `*-truncate`. This will avoid an excessive usage of append option and accidental overwrite a log file in nested callf.exe calls.

2021.05.30:
* new: bin/contools: binaries update

2021.05.30:
* fixed: src/callf: auto attach to the visible parent process console in case if current process console is not visible to fix stdout/stderr attachment to the hidden console window
* fixed: src/callf: correct current process console detachment

2021.05.28:
* fixed: src/callf: multiple `/reopen-std[out|err] <file>` or `/tee-std[in|out|err] <file>` option usage with the same `<file>` now will reuse a previously opened handle instead open of a new one to fix the output mix
* new: src/callf: `/std[out|err]-dup`, `/tee-std[in|out|err]-dup <fileno>` options to replace a sequence with respective `/reopen-std[out|err] <file>` or `/tee-std[in|out|err] <file>` options with the same `<file>`
* changed: src/callf: replaced all fopen/fwrite/fflush calls by the Win32 CreateFile/WriteFile/FlushFileBuffers calls to avoid any CRT buffering overhead over raw binary writes
* refactor: src/callf: code refactor

2021.05.27:
* fixed: src/callf: `/showas 0` accident ignore
* fixed: src/callf: lock on stdin pipe read while the output handle is closed or broken (pipe)
* fixed: src/callf: immediate exit on error from the stdin thread write function on the output handle w/o check on child process existence
* new: src/callf: `/attach-parent-console` to explicitly reattach console
* new: src/callf: `/mutex-std-writes`, `/mutex-tee-std-file-writes <handles>` options to mutual exclude writes into standard handles and tee files/pipes
* new: src/callf: `/stdin-output-flush` to flush after each write into an output handle connected with the process stdin
* new: src/callf: `/std[out|err]-flush` to flush after each write into the process stdout/stderr

2021.05.26:
* new: bin/contools: binaries update

2021.05.26:
* fixed: src/callf: missed stdout/stderr initialize in call to CreateProcess if the tee is not used (for example, in empty call: `callf.exe "" "cmd.exe /k"`)
* fixed: src/callf: `/reopen-stdout-as` and `/reopen-stderr-as` should open files for binary write
* new: src/callf: `/reopen-stdout-append`, `/reopen-stderr-append`, `/reopen-stdout-flush`, `/reopen-stderr-flush` flags to open for append and flush after each write for reopened stdout/stderr
* refactor: src/callf: code refactor

2021.05.26:
* new: bin/contools: binaries update

2021.05.26:
* changed: src/chcp: separately print and set console input and output code pages
* changed: src/printf: minor changes

2021.05.25:
* new: bin/contools: binaries update

2021.05.25:
* fixed: src/printf: application linked with the Unicode Character Set option does convert command line string into Unicode representation, so we must convert all strings back if the console output code page is used
* fixed: src/printf: missed to use console current code page
* fixed: src/printf: missed `/chcp` flag implementation
* fixed: minor fixup
* new: chcp utility to change and print console output code page, can return different results opposed to the Windows `chcp.com` utility

2021.05.24:
* new: bin/contools: binaries update

2021.05.24:
* new: src/callf: ShellExecute call support through the `/shell-exec <Verb>` option
* new: src/callf: `/D <CurrentDirectory>` option to use in both the CreateProcess and ShellExecute
* new: src/callf: `/showas <ShowWindowAsNumber>` option to use in both the CreateProcess and ShellExecute
* new: src/callf: `/print-shell-error-string`, `/no-sys-dialog-ui`, `/shell-exec-expand-env`, `/use-parent-console`, `/init-com`, `/wait-child-start` flags related to the ShellExecute
* refactor: src: callf, printf: minor refactor

2021.05.24:
* fixed: src/callf: `?` characters in the win32 error message in case if `/print-win-error-string` flag is used under non english locale

2021.05.21:
* new: src: callf, printf: `/eval-dbl-backslash-esc` or `/e\\` flag to evaluate double backslash escape sequence
* new: callf: help examples over recursion call

2021.05.20:
* fixed: src/callf: minor fixup

2021.05.20:
* new: bin/contools: binaries update

2021.05.20:
* fixed: src: callf, printf: missed to append string before the `{` character if `/no-subst-vars` flag is used
* fixed: src/callf: invalid `<ApplicationNameFormatString>` command line parameter parse
* new: src/callf: `/win-error-langid` option to explicitly set language id for win32 error messages
* changed: src: callf, printf: expand all ${...} variables in all command line arguments before {...} variables
* changed: src: callf, printf: leave ${...} string as is if respective environment variable has empty value

2021.05.20:
* new: bin/contools: binaries update

2021.05.20:
* fixed: src/callf: missed to close underlying pipe into the stdin of the child process if parent stdin pipe is being closed
* fixed: src/callf: missed to close reopened stdin/stdout/stderr handles
* fixed: src/callf: other multiple fixup
* new: src: callf, printf: added `//` command line parameter to explicitly stop parse of flag parameters
* new: src/callf: `/eval-backslash-esc` or `/e` flag to evaluate backslash escape sequences
* changed: todo update
* refactor: src/callf: minor refactor

2021.05.12:
* new: bin/contools: binaries update

2021.05.12:
* new: src/printf: `/eval-backslash-esc` or `/e` flag to evaluate backslash escape sequences

2021.05.01:
* new: bin/contools: binaries update

2021.04.30:
* new: src/callf: stdin/stdout/stderr with builtin `tee` implementation (`/tee-*` flags)
* new: src/callf: stdin/stdout/stderr reopen from a file or special `CON`/`CONIN$`/`CONOUT$` input/output devices (`/reopen-*` flags)
* new: src/callf: stdin/stdout/stderr with builtin redirection into/from child process
* new: src/callf: stdin/stdout/stderr with builtin codepage change for console read/write (`/chcp-*` flags), unicode support with codepage `65001`
* new: src/callf: explicitly control stdin (must be console) echo mode (`/stdin-echo` option)
* new: src/callf: print as is without variables expansion or substitution (`/no-expand-env` and `/no-subst-vars` flags)
* new: src/callf: return arbitrary error codes (`/ret-*` flags)
* new: src/callf: other command line options and features (experimental)
* new: src/printf: stdout with builtin codepage change for console write (`/chcp` flag), unicode support with codepage `65001`
* new: src/printf: print as is without variables expansion or substitution (`/no-expand-env` and `/no-subst-vars` flags)
* new: src/printf: other command line options and features (experimental)
* changed: src/callf: converted to use TCHAR instead char (Unicode characters set)
* changed: src/printf: converted to use TCHAR instead char (Unicode characters set)
* changed: src/envvarcmp: converted to use TCHAR instead char (Unicode characters set)
* changed: Projects: callf, clearcache, envvars, envvarcmp, printargs, printf: projects switched to build under Unicode characters set
* changed: src: callf, clearcache, envvars, envvarcmp, pipetimes, printf, retakeowner, thlibautocfg: command line arguments parse reimplementation
* changed: src: merge common error codes between projects
* changed: todo update
* refactor: src: multiple projects formatting changes and code cleanup

2021.03.11:
* fixed: compatible_iterator.hpp: fixup under msvc, gcc, clang
* changed: readme update

2021.03.09:
* fixed: src/callf: parse of `{...}` placeholders in tail arguments
* new: src: `compatible_iterator` implementation, upgraded up to C++11 standard usage
* new: src/callf: code segments reuse with different inner containers through the usage of `compatible_iterator` instead of a direct usage of STL iterators
* changed: src: code cleanup

2021.03.03:
* new: todo file

2021.02.08:
* changed: Projects: moved to build for the Windows XP x86 SP2 or Windows XP x64 SP1
* changed: bin/contools: rebuild to run at least under Windows XP x86 SP2
* changed: bin/wshbazaar/wshdynacall: wshdynacall32.dll: rebuild to run at least under Windows XP x86 SP2

2021.02.04:
* new: bin: `conutils` from `ss64.net`

2021.01.07:
* new: bin/sysinternals: `movefiles.exe` and `pendmoves.exe` utilities

2020.12.02:
* new: src/wshbazaar/wshdynacall: `DllUnregisterServer` implementation

2020.12.02:
* fixed: x64 configuration build fixup
* new: x64 configuration
* new: Born's WSH dynacall 32-bit dll (http://www.borncity.com/web/WSHBazaar1/WSHDynaCall.htm ) port to msvc2015 to enable Win32 calls from vbs scripts

2020.10.25:
* new: ritchielawrence tee implementation (mtee)

2020.02.09:
* fixed: wxwidgets build fixup
* new: wxFileDialog: added support a directory selection
* changed: wxFileDialog: rebuilded versus wxwidgets 3.1.3

2019.05.07:
* new: changelog file
