@echo off

rem Author:   Andrey Dibrov (andry at inbox dot ru)

rem Description:
rem   Script reads the length of a string by value or by variable with the
rem   string and returns it. If string is not passed, then returns 0.

rem OVERALL SCRIPT OPTIMIZATIONS:
rem 1. Iteration over a for-loop is made by peaces to avoid the script slowdown,
rem    because the cmd interpreter runs a for-loop to the end even if a goto
rem    out of a for-loop scope is occured!
rem 2. Double expansion is made over the delayed expansion, that is faster than
rem    over the "call" command prefix.

rem Command arguments:
rem %1 - Type of function:
rem   <none>  - (Default) use %2 for input string
rem   /v      - use variable %2 as input string. If %2 is empty, then the
rem             variable name is __STRING__.
rem %2 - String in default search mode, otherwise it is the name of a variable
rem      which stores string if /v flag is used.

rem Examples:
rem 1. call strlen.bat "" "Hello world!"
rem    echo ERRORLEVEL=%ERRORLEVEL%

rem Drop last error level
type nul>nul

rem Create local variable's stack with disabled of delayed expansion (to avoid ! characters expansion)
setlocal DisableDelayedExpansion

set __STRING_VAR__=__STRING__
if not "%~1" == "/v" (
  rem Unsafe strings assign, values can has control characters!
  set "__STRING__=%~2"
) else if not "%~2" == "" (
  set "__STRING_VAR__=%~2"
)

rem Create local variable's stack with enabled of delayed expansion (to workaround the script slowdown)
setlocal EnableDelayedExpansion

if "%~1" == "/v" ^
if not "%~2" == "" (
  set "__STRING__=!%__STRING_VAR__%!"
)

set __COUNTER1=0
set __FOR10_STEP=32

rem Safe and fast string check on empty value
set "__EMPTY_FIELD=~%__COUNTER1%,1"
set "__CHAR=!%__STRING_VAR__%:%__EMPTY_FIELD%!"

rem Check on quote character first
if not "!__CHAR!^" == ""^" (
  rem Check on empty value
  if "!__CHAR!" == "" exit /b 0
  rem Check on empty value (specific cmd bug case)
  if "!__CHAR!" == "!__EMPTY_FIELD!" goto EXIT
)

:LOOP
set __FOR10_BEGIN_FROM=0
set __FOR10_END_TO=%__FOR10_STEP%

:SUBLOOP10
for /L %%i in (%__FOR10_BEGIN_FROM%,1,%__FOR10_END_TO%) do (
  set "__EMPTY_FIELD=~%%i,1"
  set "__CHAR=!%__STRING_VAR__%:~%%i,1!"

  rem Check on quote character first
  if not "!__CHAR!^" == ""^" (
    rem Check on empty value
    if "!__CHAR!" == "" set __COUNTER1=%%i&& goto EXIT
    rem Check on out of bounds (specific cmd bug case)
    if "!__CHAR!" == "!__EMPTY_FIELD!" set __COUNTER1=%%i&& goto EXIT
  )
)

set /A __FOR10_BEGIN_FROM+=%__FOR10_STEP%
set /A __FOR10_END_TO+=%__FOR10_STEP%

goto SUBLOOP10

:EXIT
rem Drop internal variables but use some changed value(s) for the return
(
  endlocal
  exit /b %__COUNTER1%
)
