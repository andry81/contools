#%% version: 1

# CAUTION:
#  This configuration file is designed to be portable between 2 interpreters: unix shell scripts, windows (cmd.exe) batch scripts,
#  so it is made up to be simple as possible but not simplier as to support a single value or a values list
#  together with an escape sequence, where the character `\` is not an escape sequence character.
#  Use `$/<char>` to escape a `<char>` character which is a part of a configuration file format:
#  `"` -> `$/"` or `$/` -> `$/$/`
#  Use `$/{` as a start sequence for a variable's value substitution: `$/{<variable>}`, where `<variable>`
#  is already parsed variable from configuration file WITHOUT condition(s) or `:` characters. Otherwise a not yet parsed variable or
#  invalid one will be replaced by the `*:$/{<variable>}` sequence to fail the most usage cases in a file path,
#  where `*:` - is not valid character sequence in a windows path (`:` character additionally can block a relative path *after* the variable)
#  and `/` is a character to block a file or directory creation with such a name on a Linux system (but not a block for `mkdir -p`!).
#  In all other cases the `$/` sequence prints as is in all contexts: in a unix shell script and in a windows batch script.

# CAUTION:
#   The contools `load_config.bat` script by default uses a simplified version of parser (fast parse), where the `%<variable>%` substitution
#   placeholder is used instead of the `$/{<variable>}` substitution placeholder. You must explicitly use full parse version
#   (`-full_parse` flag) in the root `__init__.bat` script to be able to parse `$/` substitution placeholders.
#

# FORMAT:
#   [<attributes>] <variable>[:[<class_name>]]=<value>
#
# <attributes>:           Variable space separated attributes: export
# <variable>:             Variable name corresponding to the regex: [_a-zA-Z][_a-zA-Z0-9]*
# <class_name>:           class variant name: OSWIN | OSUNIX | BAT | SH
#   OSWIN:                Apply on Windows system including cygwin/mingw/msys subsystems.
#   OSUNIX:               Apply on Unix/Linux systems excluding cygwin/mingw/msys subsystems.
#   BAT:                  Apply on Windows system when this file has loaded from the Windows batch script loader.
#   SH:                   Apply on any system when this file has loaded from the Bash shell script loader.
#
# <value>:                Has 2 usage cases:
#                           * Bash or Winbat with full parse: Value with escaping and substitution support: `$/<escape_char>`, `$/{<variable>}`.
#                           * Winbat with fast parse:         Value without escaping and with substitution support: `%<variable>%`.
#                         Can start by the `"` quote character, but two quotes does remove only when exist on both ends of a value.
#

export PROJECT_CACHE_ROOT                 ="%PROJECT_ROOT%/_cache"
export PROJECT_LOG_ROOT                   ="%PROJECT_ROOT%/.log"
export PROJECT_CONFIG_ROOT                ="%PROJECT_ROOT%/config"
export PROJECT_SCRIPTS_ROOT               ="%PROJECT_ROOT%/scripts"
export PROJECT_SCRIPTS_TOOLS_ROOT         ="%PROJECT_SCRIPTS_ROOT%/tools"
export PROJECT_LIBS_ROOT                  ="%PROJECT_ROOT%/libs"
export PROJECT_CMAKE_ROOT                 ="%PROJECT_ROOT%/cmake"

export PROJECT_OUTPUT_ROOT                ="%PROJECT_ROOT%/_out"
export PROJECT_OUTPUT_CONFIG_ROOT         ="%PROJECT_OUTPUT_ROOT%/config"
export PROJECT_OUTPUT_CMAKE_CACHE_ROOT    ="%PROJECT_OUTPUT_ROOT%/cmake"

export CONTOOLS_ROOT                      ="%PROJECT_LIBS_ROOT%/contools"

export TACKLELIB_CMAKE_CONFIG_ROOT        ="%PROJECT_CONFIG_ROOT%/cmake"
export TACKLELIB_CMAKE_OUTPUT_CONFIG_ROOT ="%PROJECT_OUTPUT_CONFIG_ROOT%/cmake"

export TACKLELIB_BASH_SCRIPTS_ROOT        ="%PROJECT_LIBS_ROOT%/bash/tacklelib"
export TACKLELIB_CMAKE_SCRIPTS_ROOT       ="%PROJECT_LIBS_ROOT%/cmake/tacklelib"
export TACKLELIB_PYTHON_SCRIPTS_ROOT      ="%PROJECT_LIBS_ROOT%/python/tacklelib"
export CMDOPLIB_PYTHON_SCRIPTS_ROOT       ="%PROJECT_LIBS_ROOT%/python/cmdoplib"

export PYXVCS_BASH_SCRIPTS_ROOT           ="%PROJECT_LIBS_ROOT%/bash/pyxvcs"
export PYXVCS_PYTHON_SCRIPTS_ROOT         ="%PROJECT_LIBS_ROOT%/python/pyxvcs"
export PYXVCS_BATCH_SCRIPTS_ROOT          ="%CONTOOLS_ROOT%/pyxvcs"

export PYXVCS_CONFIG_ROOT                 ="%PROJECT_CONFIG_ROOT%/pyxvcs"
export PYXVCS_OUTPUT_CONFIG_ROOT          ="%PROJECT_OUTPUT_CONFIG_ROOT%/pyxvcs"
export PYXVCS_PROJECTS_ROOT               ="%PROJECT_ROOT%/projects"
export PYXVCS_OUTPUT_PROJECTS_ROOT        ="%PROJECT_OUTPUT_ROOT%/projects"

export PYXVCS_PROJECT_TMPL_SCRIPTS_ROOT   ="%PROJECT_SCRIPTS_ROOT%/tmpl"

INIT_VERBOSE                              =0
TOOLS_VERBOSE                             =0
PRINT_VARS_SET                            =0
